name: Deploy Communexus

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20'
  EXPO_PROJECT_ID: ${{ secrets.EXPO_PROJECT_ID }}
  FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}

jobs:
  # Test and Lint
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd functions && npm ci && cd ..

      - name: Run TypeScript type check
        run: npx tsc --noEmit

      - name: Run ESLint
        run: npm run lint

      - name: Run Prettier check
        run: npx prettier --check .

      - name: Run tests
        run: npm test

      - name: Run integration tests
        run: npm run test:integration

  # Build and Deploy Firebase Functions
  deploy-firebase:
    name: Deploy Firebase Functions
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd functions && npm ci && cd ..

      - name: Setup Firebase CLI
        run: npm install -g firebase-tools

      - name: Authenticate to Firebase
        run: firebase login --token ${{ secrets.FIREBASE_TOKEN }}

      - name: Build Firebase Functions
        run: |
          cd functions
          npm run build

      - name: Deploy Firebase Functions
        run: firebase deploy --only functions --token ${{ secrets.FIREBASE_TOKEN }}

      - name: Deploy Firestore Rules
        run: firebase deploy --only firestore:rules --token ${{ secrets.FIREBASE_TOKEN }}

      - name: Deploy Storage Rules
        run: firebase deploy --only storage --token ${{ secrets.FIREBASE_TOKEN }}

  # Build Mobile Apps (Manual - run via eas build locally or on-demand)
  # Removed automatic mobile builds to save CI/CD resources
  # Use: eas build --platform ios/android --profile preview/production

  # Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run performance tests
        run: npm run test:performance

      - name: Check bundle size
        run: |
          npx expo export --platform all
          du -sh dist/

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level moderate

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          languages: javascript

  # Notify on Success/Failure
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-firebase]
    if: always()
    steps:
      - name: Notify Success
        if: ${{ needs.deploy-firebase.result == 'success' }}
        run: |
          echo "‚úÖ Deployment successful!"
          echo "Firebase Functions: ${{ needs.deploy-firebase.result }}"
          echo "üì± For mobile builds, run: eas build --platform ios/android --profile preview/production"

      - name: Notify Failure
        if: ${{ needs.deploy-firebase.result == 'failure' }}
        run: |
          echo "‚ùå Deployment failed!"
          echo "Firebase Functions: ${{ needs.deploy-firebase.result }}"
          exit 1
