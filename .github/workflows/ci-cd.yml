name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check Prettier formatting
        run: npm run format:check

      - name: Run TypeScript type checking
        run: npm run type-check

  test:
    name: Test Suite
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Install Functions dependencies
        run: |
          cd functions
          npm ci

      - name: Build Firebase Functions
        run: |
          cd functions
          npm run build

      - name: Build Expo web (for hosting test)
        run: npx expo export --platform web

      - name: Run Jest tests with emulators
        run: npm run test:emul

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            coverage/
            test-results.xml

  build:
    name: Build Project
    runs-on: ubuntu-latest
    needs: [lint, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Cache Firebase Functions dependencies
        uses: actions/cache@v4
        with:
          path: functions/node_modules
          key: ${{ runner.os }}-functions-${{ hashFiles('functions/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-functions-

      - name: Install Firebase Functions dependencies
        run: |
          cd functions
          npm ci --prefer-offline --no-audit

      - name: Build Firebase Functions
        run: |
          cd functions
          npm run build

      - name: Build Expo project
        run: |
          npx expo export --platform all

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            functions/lib/

  deploy-firebase:
    name: Deploy Firebase Services
    runs-on: ubuntu-latest
    needs: [lint, test, build]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup Firebase CLI
        run: npm install -g firebase-tools

      - name: Setup Expo CLI
        run: npm install -g @expo/cli eas-cli

      - name: Install Firebase Functions dependencies
        run: |
          cd functions
          npm ci --prefer-offline --no-audit

      - name: Build Firebase Functions
        run: |
          cd functions
          npm run build

      - name: Deploy Firebase Functions
        run: |
          firebase use communexus
          firebase deploy --only functions --force --token ${{ secrets.FIREBASE_TOKEN }}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Deploy Firebase Firestore Rules
        run: |
          firebase use communexus
          firebase deploy --only firestore:rules --force --token ${{ secrets.FIREBASE_TOKEN }}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Deploy Firebase Storage Rules
        run: |
          firebase use communexus
          firebase deploy --only storage --force --token ${{ secrets.FIREBASE_TOKEN }}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Deploy Firebase Hosting
        run: |
          firebase use communexus
          firebase deploy --only hosting --force --token ${{ secrets.FIREBASE_TOKEN }}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      # Note: Mobile app builds (EAS) are done manually or on separate workflow
      # Development builds are local-only, not deployed via CI/CD

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [lint, test, build]
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup Firebase CLI
        run: npm install -g firebase-tools

      - name: Install Firebase Functions dependencies
        run: |
          cd functions
          npm ci --prefer-offline --no-audit

      - name: Build Firebase Functions
        run: |
          cd functions
          npm run build

      - name: Deploy to Staging Firebase Project
        run: |
          firebase use staging
          firebase deploy --only functions,firestore:rules,storage --token ${{ secrets.FIREBASE_TOKEN }}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --production --audit-level=high || true
        # Note: Only check production dependencies at high/critical level
        # Dev dependencies (like Appium) may have vulnerabilities that don't affect production

  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [lint, test, build, deploy-firebase, deploy-staging, security-scan]
    if: always()

    steps:
      - name: Notify Success
        if: ${{ needs.lint.result == 'success' && needs.test.result == 'success' }}
        run: echo "‚úÖ All checks passed! Ready for deployment."

      - name: Notify Production Deployment
        if: ${{ needs.deploy-firebase.result == 'success' }}
        run: echo "üöÄ Production deployment successful! App updated automatically."

      - name: Notify Mobile Build Completion
        if: ${{ needs.deploy-firebase.result == 'success' }}
        run: echo "üì± Mobile app build completed! Check EAS dashboard for installation links."

      - name: Notify Staging Deployment
        if: ${{ needs.deploy-staging.result == 'success' }}
        run: echo "üß™ Staging deployment successful! Ready for testing."

      - name: Notify Failure
        if: ${{ needs.lint.result == 'failure' || needs.test.result == 'failure' }}
        run: echo "‚ùå Build failed. Check the logs for details."
